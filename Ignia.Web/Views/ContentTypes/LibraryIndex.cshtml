@model TopicViewModel

@{
  Layout = "~/Views/Layout/_Layout.cshtml";
}

@section Head {
  <!-- Library Index View Styles -->
  <link rel="stylesheet" href="/Shared/Styles/Views/Library.css" />
}

@section PageHeaderSection {
  <header class="container grid-container">
    <h1>Library</h1>
  </header>
}

@section PageBodySection {

  <!-- Articles Listing/Index -->
  <article id="ArticlesIndex" class="library index container grid-container" role="article">

    <!-- Page Header -->
    <header role="banner"><h2>@Model.Topic.Title</h2></header>

    <!-- Introduction -->
    <div class="introduction">@Html.Raw(Model.Topic.Attributes.GetValue("Body"))</div>

    @foreach (var category in getCategorizedArticles()) {
      <!-- @category.Key Articles -->
      <section role="region">
        <header>
          <h2>@getCategoryHeading(category.Key)</h2>
        </header>
        @WriteArticleItems(category.Value)
      </section>
      <!-- /@category.Key Articles -->
    }

  </article>
  <!-- /Articles Listing/Index -->

}

@helper WriteArticleItems(List<Topic> articles) {

  foreach (Topic article in articles) {
    <section id="@(article.ContentType + article.Key)">
      <!-- Section Heading -->
      <h3 class="heading"><a href="@article.WebPath">@article.Title</a></h3>
      <!-- Abstract / Description -->
      <div class="description">@Html.Raw(article.Attributes.GetValue("Abstract"))</div>
    </section>
  }

}

@functions {

  /*============================================================================================================================
  | VARIABLES
  \---------------------------------------------------------------------------------------------------------------------------*/
  Dictionary<string, List<Topic>> _categorizedArticles          = null;
  List<Topic> _articlePages                                     = null;
  List<string> _contentTypes                                    = new List<string>();

  /*============================================================================================================================
  | GET ARTICLE PAGES
  \---------------------------------------------------------------------------------------------------------------------------*/
  /// <summary>
  ///   Returns a set of indexed article pages / Topics.
  /// </summary>
  /// <returns>The list of Article Topics</returns>
  List<Topic> getArticlePages() {

    /*--------------------------------------------------------------------------------------------------------------------------
    | Add expected Article Content Types to _contentTypes
    \-------------------------------------------------------------------------------------------------------------------------*/
    Topic articleContentType    = Model.TopicRepository.Load().GetTopic("Configuration:ContentTypes:Page:Article");
    foreach (Topic contentType in articleContentType.Children) {
      _contentTypes.Add(contentType.Key);
    }

    /*--------------------------------------------------------------------------------------------------------------------------
    | Add article pages with a Content Type available in (Article) _contentTypes
    \-------------------------------------------------------------------------------------------------------------------------*/
    if (_articlePages == null) {

      _articlePages             = new List<Topic>();

      foreach (string contentType in _contentTypes) {
        foreach (Topic articlePage in Model.Topic.FindAllByAttribute("ContentType", contentType)) {
          if (
            !articlePage.Attributes.GetValue("IsDisabled").Equals("1")
            && !articlePage.Attributes.GetValue("IsHidden").Equals("1")
            && !_articlePages.Contains(articlePage)
          ) {
            _articlePages.Add(articlePage);
          }
        }
      }

    }

    return _articlePages;

  }

  /*============================================================================================================================
  | GET CATEGORIZED ARTICLES
  \---------------------------------------------------------------------------------------------------------------------------*/
  /// <summary>
  ///   Returns a set of articles grouped by category.
  /// </summary>
  /// <returns>The categorized set of Article Topics</returns>
  Dictionary<string, List<Topic>> getCategorizedArticles() {

    if (_categorizedArticles == null) {

      _categorizedArticles      = new Dictionary<string, List<Topic>>();

      foreach (Topic articlePage in getArticlePages()) {
        addArticlePage(articlePage.ContentType, articlePage);
      }

    }
    return _categorizedArticles;
  }

  /*============================================================================================================================
  | GET CATEGORY HEADING
  \---------------------------------------------------------------------------------------------------------------------------*/
  /// <summary>
  ///   Returns the Article(s) category heading, based on the category (Content Type) key.
  /// </summary>
  /// <param name="categoryKey">Corresponds to the Content Type</param>
  /// <returns>Title/Heading string for the category</returns>
  string getCategoryHeading(string categoryKey) {
    string categoryTitle        = categoryKey;

    if (categoryKey == "TechnologyAdvisory") {
      categoryTitle = "Technology Advisories";
    }

    return categoryTitle;
  }

  /*============================================================================================================================
  | ADD ARTICLE PAGE
  \---------------------------------------------------------------------------------------------------------------------------*/
  /// <summary>
  ///   Ensures that the appropriate category exists and then adds the article page to the category.
  /// </summary>
  /// <param name="category">The category key.</param>
  /// <param name="applicationPage">The Article Topic.</param>
  void addArticlePage(string category, Topic applicationPage) {
    if (!_categorizedArticles.ContainsKey(category)) {
      _categorizedArticles.Add(category, new List<Topic>());
    }
    if (!_categorizedArticles[category].Contains(applicationPage)) {
      _categorizedArticles[category].Add(applicationPage);
    }
  }

}