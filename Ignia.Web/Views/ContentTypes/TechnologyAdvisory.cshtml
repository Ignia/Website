@model TopicViewModel

@{
  Layout = "~/Views/Layout/_Layout.cshtml";

  string articleAuthor = Model.TopicRepository.Load().GetTopic(Model.Topic.Attributes.GetValue("Author")).Title;
}

@section Head {
  <!-- Library Index View Styles -->
  <link rel="stylesheet" href="/Shared/Styles/Views/Library.css" />
  <link rel="stylesheet" href="/Shared/Styles/Views/Article.css" />
}

@section PageHeaderSection {
  @Html.Partial("~/Views/Layout/Header.Library.cshtml")
}

@section PageBodySection {

  <article id="LibraryArticle" class="library article" role="article" vocab="http://schema.org/" typeof="Article">
    <div class="container grid-container">
      <div class="grid-x grid-margin-x">

        <!-- Page Header / Article Title and/or Subtitle -->
        <header role="heading" class="cell">
          <h1>@Model.Topic.Title</h1>
          @if (!String.IsNullOrEmpty(Model.Topic.Attributes.GetValue("Subtitle", ""))) {
            <p class="subtitle">@Model.Topic.Attributes.GetValue("Subtitle")</p>
          }
        </header>

        <!-- Primary Article Body -->
        <div class="medium-7 cell contents primary">

          <!-- Publication Details -->
          <section id="PublicationDetails" class="publication details" role="region">
            <time datetime="@getDateTimeValue(@Model.Topic.Attributes.GetValue("PublishDate", "" ), "yyyy-MM-dd hh:mm" )" class="pubdate" property="datePublished">
              @getDateTimeValue(@Model.Topic.Attributes.GetValue("PublishDate", ""), "MMMM dd, yyyy | h:mm tt")
            </time>
            <span class="author" property="author">by @articleAuthor</span>
          </section>
          <!-- /Publication Details -->

          <!-- Technology Advisory Content Sections -->

          @if (!String.IsNullOrEmpty(@Model.Topic.Attributes.GetValue("Abstract", ""))) {
            <!-- Abstract -->
            <section id="Abstract" class="abstract" role="region" property="about">
              @Html.Raw(Model.Topic.Attributes.GetValue("Abstract"))
            </section>
            <!-- /Abstract -->
          }

          @if (!String.IsNullOrEmpty(@Model.Topic.Attributes.GetValue("Strengths", ""))) {
            <!-- Strengths Content -->
            <section id="Strengths" class="content section" role="region" property="articleSection">
              <header role="heading"><h3>Strengths</h3></header>
              <div>
                @Html.Raw(Model.Topic.Attributes.GetValue("Strengths"))
              </div>
            </section>
            <!-- /Strengths Content -->
          }

          @if (!String.IsNullOrEmpty(@Model.Topic.Attributes.GetValue("Weaknesses", ""))) {
            <!-- Weaknesses Content -->
            <section id="Weaknesses" class="content section" role="region" property="articleSection">
              <header role="heading"><h3>Weaknesses</h3></header>
              <div>
                @Html.Raw(Model.Topic.Attributes.GetValue("Weaknesses"))
              </div>
            </section>
            <!-- /Weaknesses Content -->
          }

          @if (!String.IsNullOrEmpty(@Model.Topic.Attributes.GetValue("Usage", ""))) {
            <!-- Usage Content -->
            <section id="Usage" class="content section" role="region" property="articleSection">
              <header role="heading"><h3>Usage</h3></header>
              <div>
                @Html.Raw(Model.Topic.Attributes.GetValue("Usage"))
              </div>
            </section>
            <!-- /Usage Content -->
          }

          @if (!String.IsNullOrEmpty(@Model.Topic.Attributes.GetValue("BestPractices", ""))) {
            <!-- Best Practices Content -->
            <section id="BestPractices" class="content section" role="region" property="articleSection">
              <header role="heading"><h3>Best Practices</h3></header>
              <div>
                @Html.Raw(Model.Topic.Attributes.GetValue("BestPractices"))
              </div>
            </section>
            <!-- /Best Practices Content -->
          }

          @if (!String.IsNullOrEmpty(@Model.Topic.Attributes.GetValue("Examples", ""))) {
            <!-- Examples Content -->
            <section id="Examples" class="content section" role="region" property="articleSection">
              <header role="heading"><h3>Examples</h3></header>
              <div>
                @Html.Raw(Model.Topic.Attributes.GetValue("Examples"))
              </div>
            </section>
            <!-- /Examples Content -->
          }

          <!-- /Technology Advisory Content Sections -->

        </div>
        <!-- /Primary Article Body -->

        <!-- Callouts -->
        <div class="medium-4 medium-offset-1 cell contents ancillary">

          <!-- References -->
          <aside id="References" role="complementary">

            @if (!String.IsNullOrEmpty(@Model.Topic.Attributes.GetValue("Website", ""))) {
              <!-- Website -->
              <h4>Website</h4>
              <p>@Html.Raw(getReference(@Model.Topic.Attributes.GetValue("Website")))</p>
              <!-- /Website -->
            }

            @if (!String.IsNullOrEmpty(@Model.Topic.Attributes.GetValue("Documentation", ""))) {
              <!-- Documentation -->
              <h4>Documentation</h4>
              <p>@Html.Raw(getReference(@Model.Topic.Attributes.GetValue("Documentation")))</p>
              <!-- /Documentation -->
            }

            @if (Model.Topic.Children["Resources"] != null && Model.Topic.Children["Resources"].Children.Count > 0) {
              <!-- Additional Resources -->
              <h4>Additional Resources</h4>
              <ul id="Resources">
                @foreach (Topic resource in Model.Topic.Children["Resources"].Children.Sorted) {
                  <li>@Html.Raw(getReference(resource.Attributes.GetValue("URL", ""), resource.Title))</li>
                }
              </ul>
            }

          </aside>
          <!-- /References -->

        </div>
        <!-- /Callouts -->

      </div>

    </div>
  </article>

}

@functions {

  /*============================================================================================================================
  | GET DATETIME VALUE
  \---------------------------------------------------------------------------------------------------------------------------*/
  /// <summary>
  ///   Returns a date and/or time value based on the provided string value and date/time format
  /// </summary>
  /// <param name="value">String representation of the date/time Attribute value.</param>
  /// <param name="format">Specified date/time string format for return value.</param>
  /// <returns>String representation of the date and/or time, corresponding to the format provided.</returns>
  string getDateTimeValue(string value, string format) {

    /*--------------------------------------------------------------------------------------------------------------------------
    | Establish variables
    \-------------------------------------------------------------------------------------------------------------------------*/
    string dateTimeOutput       = "";
    DateTime dateTimeValue;

    /*--------------------------------------------------------------------------------------------------------------------------
    | Verify DateTime value and set it to the output string based on the specified format
    \-------------------------------------------------------------------------------------------------------------------------*/
    if (DateTime.TryParse(value, out dateTimeValue)) {
      dateTimeOutput            = dateTimeValue.ToString(format);
    }

    /*--------------------------------------------------------------------------------------------------------------------------
    | Return output
    \-------------------------------------------------------------------------------------------------------------------------*/
    return dateTimeOutput;

  }

  /*============================================================================================================================
  | GET REFERENCE
  \---------------------------------------------------------------------------------------------------------------------------*/
  /// <summary>
  ///   Formats a sidebar reference Attribute as a link if the value is a valid URI; otherwise, returns the raw text.
  /// </summary>
  /// <param name="value"></param>
  /// <param name="label"></param>
  /// <returns></returns>
  string @getReference(string value, string label = null) {

    /*--------------------------------------------------------------------------------------------------------------------------
    | Establish variables
    \-------------------------------------------------------------------------------------------------------------------------*/
    string formattedReference = value;

    /*--------------------------------------------------------------------------------------------------------------------------
    | Verifies whether specific value is a valid URI, and if so, transforms it (and the label, if provided) into a text link
    \-------------------------------------------------------------------------------------------------------------------------*/
    if (Uri.IsWellFormedUriString(value, UriKind.Absolute)) {
      formattedReference = "<a href=\"" + value + "\" title=\"" + ((label != null) ? label : value) + "\">" + ((label != null) ? label : value) + "</a>";
    }

    /*--------------------------------------------------------------------------------------------------------------------------
    | Return output
    \-------------------------------------------------------------------------------------------------------------------------*/
    return formattedReference;

  }

}
